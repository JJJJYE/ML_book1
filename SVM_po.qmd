---
title: "Support Vector Machine with Polynomial Kernel"
format: 
  html:
    theme: zephyr
    smooth-scroll: true
    toc: true
    toc-location: right
    # self-contained: true
# author: 
#     - name: J.I. Seo
#       affiliations:
#       - Gyeongguk National University
#     - name: J.W. Lee
#       # affiliations:
#       # - University of Missouri
      
number-sections: true
highlight-style: pygments
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
options(width=200)
```

> Support Vector Machine의 장점
 
- 분류 경계가 직사각형만 가능한 의사결정나무의 단점을 해결할 수 있다.
- 복잡한 비선형 결정 경계를 학습하는데 유용하다.
- 예측 변수에 분포를 가정하지 않는다. 

<br />

> Support Vector Machine의 단점

- 초모수가 매우 많으며, 초모수에 민감하다.
    - 최적의 모형을 찾기 위해 다양한 커널과 초모수의 조합을 평가해야 한다.
- 모형 훈련이 느리다.
- 연속형 예측 변수만 가능하다.
    - 범주형 예측 변수는 더미 또는 원-핫 인코딩 변환을 수행해야 한다.
- 해석하기 어려운 복잡한 블랙박스 모형이다.
 
 <br />
 
> 실습 자료 : 1912년 4월 15일 타이타닉호 침몰 당시 탑승객들의 정보를 기록한 데이터셋이며, 총 11개의 변수를 포함하고 있다. 이 자료에서 **Target**은 `Survived`이다.

<center>![](./image/그림_titanic.png)</center>

<br />

<center><img src="./image/Titanic_표.png" width="400" height="400"></center>

<br />

## 데이터 불러오기

```{r, eval=F}
pacman::p_load("data.table", "dplyr", "tidyr",
               "caret",
               "ggplot2", "GGally",
               "e1071")

titanic <- fread("../Titanic.csv")                                      # 데이터 불러오기

titanic %>%
  as_tibble
```

```{r, echo=F}
pacman::p_load("data.table", "dplyr", "tidyr",
               "caret",
               "ggplot2", "GGally",
               "e1071")


titanic <- fread(paste(getwd(), "/DATA/Titanic.csv", sep = "/"))             # 데이터 불러오기

titanic %>%
  as_tibble
```



## 데이터 전처리 I

```{r}
titanic %<>%
  data.frame() %>%                                                      # Data Frame 형태로 변환 
  mutate(Survived = ifelse(Survived == 1, "yes", "no"))                 # Target을 문자형 변수로 변환

# 1. Convert to Factor
fac.col <- c("Pclass", "Sex",
             # Target
             "Survived")

titanic <- titanic %>% 
  mutate_at(fac.col, as.factor)                                         # 범주형으로 변환

glimpse(titanic)                                                        # 데이터 구조 확인

# 2. Generate New Variable
titanic <- titanic %>%
  mutate(FamSize = SibSp + Parch)                                       # "FamSize = 형제 및 배우자 수 + 부모님 및 자녀 수"로 가족 수를 의미하는 새로운 변수

glimpse(titanic)                                                        # 데이터 구조 확인

# 3. Select Variables used for Analysis
titanic1 <- titanic %>% 
  select(Survived, Pclass, Sex, Age, Fare, FamSize)                     # 분석에 사용할 변수 선택

# 4. Convert One-hot Encoding for 범주형 예측 변수
dummies <- dummyVars(formula = ~ .,                                     # formula : ~ 예측 변수 / "." : data에 포함된 모든 변수를 의미
                     data = titanic1[,-1],                              # Dataset including Only 예측 변수 -> Target 제외
                     fullRank = FALSE)                                  # fullRank = TRUE : Dummy Variable, fullRank = FALSE : One-hot Encoding

titanic.Var   <- predict(dummies, newdata = titanic1) %>%               # 범주형 예측 변수에 대한 One-hot Encoding 변환
  data.frame()                                                          # Data Frame 형태로 변환  

glimpse(titanic.Var)                                                    # 데이터 구조 확인

# Combine Target with 변환된 예측 변수
titanic.df <- data.frame(Survived = titanic1$Survived, 
                         titanic.Var)

titanic.df %>%
  as_tibble

glimpse(titanic.df)                                                     # 데이터 구조 확인
```



## 데이터 탐색

```{r}
ggpairs(titanic.df,                                        
        aes(colour = Survived)) +                         # Target의 범주에 따라 색깔을 다르게 표현
  theme_bw()

ggpairs(titanic.df,                                     
        aes(colour = Survived, alpha = 0.8)) +            # Target의 범주에 따라 색깔을 다르게 표현
  scale_colour_manual(values = c("purple", "cyan4")) +    # 특정 색깔 지정
  scale_fill_manual(values = c("purple", "cyan4")) +      # 특정 색깔 지정
  theme_bw()
```




## 데이터 분할

```{r}
# Partition (Training Dataset : Test Dataset = 7:3)
y      <- titanic.df$Survived                           # Target

set.seed(200)
ind    <- createDataPartition(y, p = 0.7, list  =T)     # Index를 이용하여 7:3으로 분할
titanic.trd <- titanic.df[ind$Resample1,]               # Training Dataset
titanic.ted <- titanic.df[-ind$Resample1,]              # Test Dataset
```




## 데이터 전처리 II

```{r}
# 1. Imputation
titanic.trd.Imp <- titanic.trd %>% 
  mutate(Age = replace_na(Age, mean(Age, na.rm = TRUE)))                 # 평균으로 결측값 대체

titanic.ted.Imp <- titanic.ted %>% 
  mutate(Age = replace_na(Age, mean(titanic.trd$Age, na.rm = TRUE)))     # Training Dataset을 이용하여 결측값 대체

# 2. Standardization
preProcValues <- preProcess(titanic.trd.Imp, 
                            method = c("center", "scale"))               # Standardization 정의 -> Training Dataset에 대한 평균과 표준편차 계산 

titanic.trd.Imp <- predict(preProcValues, titanic.trd.Imp)               # Standardization for Training Dataset
titanic.ted.Imp <- predict(preProcValues, titanic.ted.Imp)               # Standardization for Test Dataset

glimpse(titanic.trd.Imp)                                                 # 데이터 구조 확인
glimpse(titanic.ted.Imp)                                                 # 데이터 구조 확인
```



## 모형 훈련

Package `"e1071"`는 Support Vector Machine을 효율적으로 구현할 수 있는 "libsvm"을 R에서 사용할 수 있도록 만든 Package이며, 함수 `svm()`을 이용하여 Support Vector Machine을 수행할 수 있다. 함수에서 사용할 수 있는 자세한 옵션은 [여기](https://www.rdocumentation.org/packages/e1071/versions/1.7-3/topics/svm)를 참고한다.

```{r, eval=FALSE}
svm(formula, data, kernel, cost, degree, gamma, coef0, probability, ...)
```

- `formula` : Target과 예측 변수의 관계를 표현하기 위한 함수로써 일반적으로 `Target ~ 예측 변수`의 형태로 표현한다.
- `data` : `formula`에 포함하고 있는 변수들의 데이터셋(Data Frame)
-  `kernel` : Kernel 함수
    - `"linear"` : $k(\boldsymbol{x}, \boldsymbol{x}') = \boldsymbol{x}\boldsymbol{x}'$
    - `"polynomial"` : $k(\boldsymbol{x}, \boldsymbol{x}') = (\gamma \boldsymbol{x}\boldsymbol{x}' + \text{coef0})^{\text{degree}}$
    - `"radial"` : $k(\boldsymbol{x}, \boldsymbol{x}') = \exp\left(-\gamma||\boldsymbol{x}-\boldsymbol{x}'||^2 \right)$
    - `"sigmoid"` : $k(\boldsymbol{x}, \boldsymbol{x}') = tanh(\gamma \boldsymbol{x}\boldsymbol{x}' + \text{coef0})$
- `cost` : 데이터를 잘못 분류하는 선을 그을 경우 지불해야 할 cost
- `degree` : 다항 커널의 차수
- `gamma` : 개별 case가 결정경계의 위치에 미치는 영향
- `coef0` : 다항 커널의 상수항
- `probability` : `Test Dataset`에 대한 `예측 확률`의 생성 여부
    - `TRUE` : 함수 `predict()`를 이용하여 `Test Dataset`에 대한 `예측 확률`을 생성할 수 있다.


```{r}
svm.model.po <- svm(Survived ~.,     
                    data = titanic.trd.Imp,  
                    kernel = "polynomial", 
                    cost = 1,              
                    degree = 2,
                    gamma = 2,
                    coef0 = 1,
                    probability = TRUE)

summary(svm.model.po)
```

`Result!` `Number of Support Vectors`는 결정경계와 가까이 위치한 case의 수이다. 해당 데이터에서는 총 252개의 case로, `"Survived = no"`에 해당하는 case는 128개, `"Survived = yes"`에 해당하는 case는 124개이다. case의 행 번호는 `svm.model.po$index`를 이용하여 확인할 수 있다.

```{r}
# Support Vector Index
svm.model.po$index   
```



## 모형 평가

`Caution!` 모형 평가를 위해 `Test Dataset`에 대한 `예측 class/확률` 이 필요하며, 함수 `predict()`를 이용하여 생성한다. 

```{r}
# 예측 class 생성 
svm.po.pred <- predict(svm.model.po,
                       newdata = titanic.ted.Imp[,-1],  # Test Dataset including Only 예측 변수   
                       type = "class")                  # 예측 class 생성       

svm.po.pred %>%
  as_tibble
```

<br />

### ConfusionMatrix

```{r}
CM   <- caret::confusionMatrix(svm.po.pred, titanic.ted.Imp$Survived, 
                               positive = "yes")        # confusionMatrix(예측 class, 실제 class, positive="관심 class")
CM
```

<br />

### ROC 곡선

```{r}
# 예측 확률 생성
test.svm.prob <- predict(svm.model.po, 
                         newdata = titanic.ted.Imp[,-1],    # Test Dataset including Only 예측 변수   
                         probability = TRUE)                # 예측 확률 생성       

attr(test.svm.prob, "probabilities") %>%
  as_tibble
```

```{r}
test.svm.prob <- attr(test.svm.prob, "probabilities")[,2]   # "Survived = yes"에 대한 예측 확률

ac  <- titanic.ted.Imp$Survived                             # Test Dataset의 실제 class 
pp  <- as.numeric(test.svm.prob)                            # 예측 확률을 수치형으로 변환
```


#### Package "pROC"

```{r}
pacman::p_load("pROC")

svm.roc  <- roc(ac, pp, plot = T, col = "gray")             # roc(실제 class, 예측 확률)
auc      <- round(auc(svm.roc), 3)
legend("bottomright", legend = auc, bty = "n")
```

`Caution!` Package `"pROC"`를 통해 출력한 ROC 곡선은 다양한 함수를 이용해서 그래프를 수정할 수 있다.

```{r}
# 함수 plot.roc() 이용
plot.roc(svm.roc,   
         col="gray",                                        # Line Color
         print.auc = TRUE,                                  # AUC 출력 여부
         print.auc.col = "red",                             # AUC 글씨 색깔
         print.thres = TRUE,                                # Cutoff Value 출력 여부
         print.thres.pch = 19,                              # Cutoff Value를 표시하는 도형 모양
         print.thres.col = "red",                           # Cutoff Value를 표시하는 도형의 색깔
         auc.polygon = TRUE,                                # 곡선 아래 면적에 대한 여부
         auc.polygon.col = "gray90")                        # 곡선 아래 면적의 색깔
```


```{r}
# 함수 ggroc() 이용
ggroc(svm.roc) +
annotate(geom = "text", x = 0.9, y = 1.0,
label = paste("AUC = ", auc),
size = 5,
color="red") +
theme_bw()
```



#### Package "Epi"

```{r}
pacman::p_load("Epi")       
# install_version("etm", version = "1.1", repos = "http://cran.us.r-project.org")

ROC(pp, ac, plot = "ROC")                                   # ROC(예측 확률, 실제 class)  
```


#### Package "ROCR"

```{r}
pacman::p_load("ROCR")

svm.pred <- prediction(pp, ac)                              # prediction(예측 확률, 실제 class)    

svm.perf <- performance(svm.pred, "tpr", "fpr")             # performance(, "민감도", "1-특이도")                      
plot(svm.perf, col = "gray")                                # ROC Curve

perf.auc   <- performance(svm.pred, "auc")                  # AUC
auc        <- attributes(perf.auc)$y.values 
legend("bottomright", legend = auc, bty = "n")
```

<br />

### 향상 차트

#### Package "ROCR"

```{r}
svm.perf <- performance(svm.pred, "lift", "rpp")            # Lift Chart
plot(svm.perf, main = "lift curve", 
     colorize = T,                                          # Coloring according to cutoff
     lwd = 2)  
```


```{r, echo=F, eval = F, include=FALSE}
#### **2) Package "lift"**

pacman::p_load("lift")

ac.numeric <- ifelse(titanic.ted.Imp$Survived == "yes", 1, 0)         # Target을 수치형으로 변환

plotLift(test.svm.prob, ac.numeric, cumulative = T, n.buckets = 24)   # plotLift(7-2에서 생성한 예측 확률, 실제 class)
TopDecileLift(test.svm.prob, ac.numeric)		                          # Top 10%의 향상도 출력
```


