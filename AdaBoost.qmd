---
title: "AdaBoost"
format: 
  html:
    theme: zephyr
    smooth-scroll: true
    toc: true
    toc-location: right
    # self-contained: true
# author: 
#     - name: J.I. Seo
#       affiliations:
#       - Gyeongguk National University
#     - name: J.W. Lee
#       # affiliations:
#       # - University of Missouri
      
number-sections: true
highlight-style: pygments
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
options(width=200)
```

> 실습 자료 : 1912년 4월 15일 타이타닉호 침몰 당시 탑승객들의 정보를 기록한 데이터셋이며, 총 11개의 변수를 포함하고 있다. 이 자료에서 **Target**은 `Survived`이다.

<center>![](./image/그림_titanic.png)</center>

<br />

<center><img src="./image/Titanic_표.png" width="400" height="400"></center>

<br />

## 데이터 불러오기


```{r, eval=F}
pacman::p_load("data.table", 
               "tidyverse", 
               "dplyr", "tidyr",
               "ggplot2", "GGally",
               "caret",
               "adabag")                                                # For boosting

titanic <- fread("../Titanic.csv")                                      # 데이터 불러오기

titanic %>%
  as_tibble
```

```{r, echo=F}
pacman::p_load("data.table", 
               "tidyverse", 
               "dplyr", "tidyr",
               "ggplot2", "GGally",
               "caret",
               "adabag")                                                # For boosting

titanic <- fread(paste(getwd(), "/DATA/Titanic.csv", sep = "/"))              # 데이터 불러오기

titanic %>%
  as_tibble
```


## 데이터 전처리 I

```{r}
titanic %<>%
  data.frame() %>%                                                      # Data Frame 형태로 변환 
  mutate(Survived = ifelse(Survived == 1, "yes", "no"))                 # Target을 문자형 변수로 변환

# 1. Convert to Factor
fac.col <- c("Pclass", "Sex",
             # Target
             "Survived")

titanic <- titanic %>% 
  mutate_at(fac.col, as.factor)                                         # 범주형으로 변환

glimpse(titanic)                                                        # 데이터 구조 확인

# 2. Generate New Variable
titanic <- titanic %>%
  mutate(FamSize = SibSp + Parch)                                       # "FamSize = 형제 및 배우자 수 + 부모님 및 자녀 수"로 가족 수를 의미하는 새로운 변수

glimpse(titanic)                                                        # 데이터 구조 확인

# 3. Select Variables used for Analysis
titanic1 <- titanic %>% 
  dplyr::select(Survived, Pclass, Sex, Age, Fare, FamSize)              # 분석에 사용할 변수 선택

glimpse(titanic1)                                                       # 데이터 구조 확인
```

## 데이터 탐색

```{r}
ggpairs(titanic1,                                        
        aes(colour = Survived)) +                         # Target의 범주에 따라 색깔을 다르게 표현
  theme_bw()

ggpairs(titanic1,                                     
        aes(colour = Survived, alpha = 0.8)) +            # Target의 범주에 따라 색깔을 다르게 표현
  scale_colour_manual(values = c("#00798c", "#d1495b")) + # 특정 색깔 지정
  scale_fill_manual(values = c("#00798c", "#d1495b")) +   # 특정 색깔 지정
  theme_bw()
```


## 데이터 분할

```{r}
# Partition (Training Dataset : Test Dataset = 7:3)
y      <- titanic1$Survived                           # Target

set.seed(200)
ind    <- createDataPartition(y, p = 0.7, list  =T)   # Index를 이용하여 7:3으로 분할
titanic.trd <- titanic1[ind$Resample1,]               # Training Dataset
titanic.ted <- titanic1[-ind$Resample1,]              # Test Dataset
```


## 데이터 전처리 II

```{r}
# Imputation
titanic.trd.Imp <- titanic.trd %>% 
  mutate(Age = replace_na(Age, mean(Age, na.rm = TRUE)))                 # 평균으로 결측값 대체

titanic.ted.Imp <- titanic.ted %>% 
  mutate(Age = replace_na(Age, mean(titanic.trd$Age, na.rm = TRUE)))     # Training Dataset을 이용하여 결측값 대체

glimpse(titanic.trd.Imp)                                                 # 데이터 구조 확인
glimpse(titanic.ted.Imp)                                                 # 데이터 구조 확인
```

## 모형 훈련

Boosting은 다수의 약한 학습자(간단하면서 성능이 낮은 예측 모형)을 순차적으로 학습하는 앙상블 기법이다. Boosting의 특징은 이전 모형의 오차를 반영하여 다음 모형을 생성하며, 오차를 개선하는 방향으로 학습을 수행한다.

<center>![](./image/boosting.png)</center>

</br>


AdaBoost는 최초로 Boosting 기법을 사용한 머신러닝 알고리듬으로 잘못 분류한 case에 대해 높은 Sample Weight를 부여하여 오차를 개선해 나가는 학습 방식이다.

<center>
![](./image/adaboost.png){width=70%}
</center>

</br>


R에서 AdaBoost를 수행하기 위해 package `"adabag"`에서 제공하는 함수 `boosting()`를 이용할 수 있으며, 함수의 자세한 옵션은 [여기](https://www.rdocumentation.org/packages/adabag/versions/4.2/topics/boosting)를 참고한다. 게다가, package `"adabag"`는 package `"rpart"`를 이용하여 트리를 생성하기 때문에 함수 `rpart.control()`을 이용하여 다양한 옵션을 입력할 수 있으며, 함수의 자세한 옵션은 [여기](https://www.rdocumentation.org/packages/rpart/versions/4.1.23/topics/rpart.control)를 참고한다.


```{r, eval=FALSE}
boosting(formula, data, mfinal, ...)                  # AdaBoost
boosting.cv(formula, data, v, mfinal, ...)            # AdaBoost based on Cross Validation
```

- `formula` : Target과 예측 변수의 관계를 표현하기 위한 함수로써 일반적으로 `Target ~ 예측 변수`의 형태로 표현한다.
- `data` : `formula`에 포함하고 있는 변수들의 데이터셋(Data Frame)
-  `mfinal` : 반복 횟수(= 생성하고자 하는 트리 개수)
- `v` : $k$-Fold Cross Validation의 $k$(= Fold 수)

```{r}
set.seed(100)                                         # Seed 고정 -> 동일한 결과를 출력하기 위해
titanic.ada <- boosting(Survived~.,
                        data = titanic.trd.Imp,
                        mfinal = 50)    
```

`Caution!` 함수 `boosting()`은 기본값으로 깊이가 30인 트리를 생성한다. 만약 `"stump"`를 생성하고 싶으면 아래의 코드를 수행하면 되지만 시간이 너무 오래 걸리는 단점이 있다.

```{r, eval = FALSE}
rc <- rpart.control(maxdepth = 1)                

set.seed(100)
titanic.ada <- boosting(Survived~.,
                        data = titanic.trd.Imp,
                        mfinal = 50,  
                        control = rc)
```


```{r}
# 변수 중요도
titanic.ada$importance

# 변수 중요도 plot
imp <- data.frame(Importance = titanic.ada$importance)
imp$varnames <- rownames(imp) 
rownames(imp) <- NULL

ggplot(imp, aes(x = reorder(varnames, Importance), y = Importance)) +
  geom_point() +
  geom_segment(aes(x = varnames, xend = varnames,
                   y = 0, yend = Importance)) +
  ylab("Importance") +
  xlab("") +
  coord_flip() +
  theme_bw()
```

`Result!` 변수 `Fare`이 Target `Survived`을 분류하는 데 있어 중요하다.

```{r}
# 각 트리의 모형 가중치
titanic.ada$weights			
```

`Result!` 모형 가중치는 해당 예측 모형이 얼마나 정확한지에 따라 결정되며, 정확도가 높을수록 높은 가중치가 부여된다.


## 모형 평가

`Caution!` 모형 평가를 위해 `Test Dataset`에 대한 `예측 class/확률` 이 필요하며, 함수 `predict()`를 이용하여 생성한다. 
```{r}
# 예측 class/확률 생성 
test.ada.pred <- predict(titanic.ada,
                         newdata = titanic.ted.Imp[,-1]) # Test Dataset including Only 예측 변수    

# 예측 class
test.ada.pred$class

# 예측 확률
test.ada.pred$prob
```

<br />

### ConfusionMatrix

```{r}
test.ada.class <- as.factor(test.ada.pred$class)       # Converting Character into Factor

CM   <- caret::confusionMatrix(test.ada.class, titanic.ted.Imp$Survived, 
                               positive = "yes")       # confusionMatrix(예측 class, 실제 class, positive = "관심 class")
CM
```

<br />

### ROC 곡선

```{r}
# 예측 확률 
test.ada.prob <- test.ada.pred$prob[,2]                # "Survived = yes"에 대한 예측 확률

ac  <- titanic.ted.Imp$Survived                        # Test Dataset의 실제 class 
pp  <- as.numeric(test.ada.prob)                       # 예측 확률을 수치형으로 변환
```

####  Package "pROC"

```{r}
pacman::p_load("pROC")

ada.roc  <- roc(ac, pp, plot = T, col = "gray")        # roc(실제 class, 예측 확률)
auc      <- round(auc(ada.roc), 3)
legend("bottomright", legend = auc, bty = "n")
```

`Caution!` Package `"pROC"`를 통해 출력한 ROC 곡선은 다양한 함수를 이용해서 그래프를 수정할 수 있다.

```{r}
# 함수 plot.roc() 이용
plot.roc(ada.roc,   
         col="gray",                                   # Line Color
         print.auc = TRUE,                             # AUC 출력 여부
         print.auc.col = "red",                        # AUC 글씨 색깔
         print.thres = TRUE,                           # Cutoff Value 출력 여부
         print.thres.pch = 19,                         # Cutoff Value를 표시하는 도형 모양
         print.thres.col = "red",                      # Cutoff Value를 표시하는 도형의 색깔
         auc.polygon = TRUE,                           # 곡선 아래 면적에 대한 여부
         auc.polygon.col = "gray90")                   # 곡선 아래 면적의 색깔
```


```{r}
# 함수 ggroc() 이용
ggroc(ada.roc) +
annotate(geom = "text", x = 0.9, y = 1.0,
label = paste("AUC = ", auc),
size = 5,
color="red") +
theme_bw()
```



#### Package "Epi"

```{r}
pacman::p_load("Epi")       
# install_version("etm", version = "1.1", repos = "http://cran.us.r-project.org")

ROC(pp, ac, plot = "ROC")                              # ROC(예측 확률, 실제 class)  
```

#### Package "ROCR"

```{r}
pacman::p_load("ROCR")

ada.pred <- prediction(pp, ac)                         # prediction(예측 확률, 실제 class) 

ada.perf <- performance(ada.pred, "tpr", "fpr")        # performance(, "민감도", "1-특이도")                      
plot(ada.perf, col = "gray")                           # ROC Curve

perf.auc   <- performance(ada.pred, "auc")             # AUC
auc        <- attributes(perf.auc)$y.values
legend("bottomright", legend = auc, bty = "n")
```

<br />

### 향상 차트

#### Package "ROCR"

```{r}
ada.perf <- performance(ada.pred, "lift", "rpp")       # Lift Chart                      
plot(ada.perf, main = "lift curve",
     colorize = T,                                     # Coloring according to cutoff 
     lwd = 2) 
```


```{r, eval=F, echo=F, include=FALSE}
#### **2) Package "lift"**

pacman::p_load("lift")

ac.numeric <- ifelse(titanic.ted.Imp$Survived == "yes", 1, 0)         # Target을 수치형으로 변환

plotLift(test.svm.prob, ac.numeric, cumulative = T, n.buckets = 24)   # plotLift(7-2에서 생성한 예측 확률, 실제 class)
TopDecileLift(test.svm.prob, ac.numeric)		                          # Top 10%의 향상도 출력
```
