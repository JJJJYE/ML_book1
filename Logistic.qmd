---
title: "Logistic Regression"
format: 
  html:
    theme: zephyr
    smooth-scroll: true
    toc: true
    toc-location: right
    # self-contained: true
# author: 
#     - name: J.I. Seo
#       affiliations:
#       - Gyeongguk National University
#     - name: J.W. Lee
#       # affiliations:
#       # - University of Missouri
      
number-sections: true
highlight-style: pygments
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
options(width=200)
```


> Logistic Regression의 장점
 
- 연속형 예측 변수와 범주형 예측 변수 모두 다룰 수 있다.
- 해석 가능한 모형이다.
- 예측 변수에 대해 정규분포 가정이 필요없다.

</br>

> Logistic Regression의 단점

- 클래스가 완전히 분리되어 있는 경우에는 작동하지 않는다.
- 클래스에 대해 선형 분리를 가정하기 때문에 선형 분리가 불가능한 클래스 문제에는 성능이 좋지 않다.
- 각 예측 변수와 로그 오즈 간에 선형 관계를 가정하므로 어떤 예측 변수의 낮은 값과 높은 값이 동일한 클래스에 속한다면 중간 정도에 있는 값도 동일한 클래스에 속해야 한다.

</br>

> 실습 자료 : 1912년 4월 15일 타이타닉호 침몰 당시 탑승객들의 정보를 기록한 데이터셋이며, 총 11개의 변수를 포함하고 있다. 이 자료에서 **Target**은 `Survived`이다.

<center>![](./image/그림_titanic.png)</center>

<br />

<center><img src="./image/Titanic_표.png" width="400" height="400"></center>

<br />

## 데이터 불러오기

```{r, eval = F}
pacman::p_load("data.table",
               "tidyverse", 
               "dplyr", "tidyr",
               "ggplot2", "GGally",
               "caret")                      

titanic <- fread("../Titanic.csv")                         # 데이터 불러오기

titanic %>%
  as_tibble
```

```{r, echo=F}
pacman::p_load("data.table",
               "tidyverse", 
               "dplyr", "tidyr",
               "ggplot2", "GGally",
               "caret")

titanic <- fread(paste(getwd(), "/DATA/Titanic.csv", sep = "/"))             # 데이터 불러오기

titanic %>%
  as_tibble
```

## 데이터 전처리 I

```{r}
titanic %<>%
  data.frame() %>%                                                      # Data Frame 형태로 변환 
  mutate(Survived = ifelse(Survived == 1, "yes", "no"))                 # Target을 문자형 변수로 변환

# 1. Convert to Factor
fac.col <- c("Pclass", "Sex",
             # Target
             "Survived")

titanic <- titanic %>% 
  mutate_at(fac.col, as.factor)                                         # 범주형으로 변환

glimpse(titanic)                                                        # 데이터 구조 확인

# 2. Generate New Variable
titanic <- titanic %>%
  mutate(FamSize = SibSp + Parch)                                       # "FamSize = 형제 및 배우자 수 + 부모님 및 자녀 수"로 가족 수를 의미하는 새로운 변수

glimpse(titanic)                                                        # 데이터 구조 확인

# 3. Select Variables used for Analysis
titanic1 <- titanic %>% 
  select(Survived, Pclass, Sex, Age, Fare, FamSize)                     # 분석에 사용할 변수 선택

titanic1 %>%
  as_tibble
```

## 데이터 탐색

```{r}
ggpairs(titanic1,                                        
        aes(colour = Survived)) +                         # Target의 범주에 따라 색깔을 다르게 표현
  theme_bw()

ggpairs(titanic1,                                     
        aes(colour = Survived, alpha = 0.8)) +            # Target의 범주에 따라 색깔을 다르게 표현
  scale_colour_manual(values = c("purple", "cyan4")) +    # 특정 색깔 지정
  scale_fill_manual(values = c("purple", "cyan4")) +      # 특정 색깔 지정
  theme_bw()
```

## 데이터 분할

```{r}
# Partition (Training Dataset : Test Dataset = 7:3)
y      <- titanic1$Survived                             # Target

set.seed(200)
ind    <- createDataPartition(y, p = 0.7, list  =T)     # Index를 이용하여 7:3으로 분할
titanic.trd <- titanic1[ind$Resample1,]                 # Training Dataset
titanic.ted <- titanic1[-ind$Resample1,]                # Test Dataset
```

## 데이터 전처리 II

```{r}
# 1. Imputation
titanic.trd.Imp <- titanic.trd %>% 
  mutate(Age = replace_na(Age, mean(Age, na.rm = TRUE)))                 # 평균으로 결측값 대체

titanic.ted.Imp <- titanic.ted %>% 
  mutate(Age = replace_na(Age, mean(titanic.trd$Age, na.rm = TRUE)))     # Training Dataset을 이용하여 결측값 대체

# 2. Standardization
preProcValues <- preProcess(titanic.trd.Imp, 
                            method = c("center", "scale"))               # Standardization 정의 -> Training Dataset에 대한 평균과 표준편차 계산 

titanic.trd.Imp <- predict(preProcValues, titanic.trd.Imp)               # Standardization for Training Dataset
titanic.ted.Imp <- predict(preProcValues, titanic.ted.Imp)               # Standardization for Test Dataset

glimpse(titanic.trd.Imp)                                                 # 데이터 구조 확인
glimpse(titanic.ted.Imp)                                                 # 데이터 구조 확인
```


## 모형 훈련

`Caution!` 함수 `glm()`에서 `Logistic Regression`은 Target이 2개의 클래스를 가질 때 "두 번째 클래스"에 속할 확률을 모델링하며, 범주형 예측 변수의 경우 더미 변환을 자동적으로 수행한다. 여기서, "두 번째 클래스"란 "Factor" 변환하였을 때 두 번째 수준(Level)을 의미한다. 예를 들어, "a"와 "b" 2개의 클래스를 가진 Target을 "Factor" 변환하였을 때 수준이 "a" "b"라면, 첫 번째 클래스는 "a", 두 번째 클래스는 "b"가 된다.

```{r}
logis.fit <- glm(Survived ~ . , data = titanic.trd.Imp,
                 family = "binomial")                  # For Logit Transformation

logis.fit                                              # Fitted Logistic Regression

summary(logis.fit)                                     # Summary for Fitted Logistic Regression
```

`Result!` 데이터 "titanic.trd.Imp"의 Target "Survived"은 "no"와 "yes" 2개의 클래스를 가지며, "Factor" 변환하면 알파벳순으로 수준을 부여하기 때문에 "yes"가 두 번째 클래스가 된다. 즉, "yes"에 속할 확률(= 탑승객이 생존할 확률)을 $p$라고 할 때, 추정된 회귀계수를 이용하여 다음과 같은 모형식을 얻을 수 있다.
$$
\begin{align*}
\log{\frac{p}{1-p}} = &\;2.573 - 1.052X_{\text{Pclass2}} - 2.373 X_{\text{Pclass3}} -2.720  X_{\text{Sexmale}} \\
                      &-0.530 Z_{\text{Age}} +0.123 Z_{\text{Fare}} - 0.398 Z_{\text{FamSize}}
\end{align*}
$$
여기서, $Z_{\text{예측 변수}}$는 표준화한 예측 변수, $X_{\text{예측 변수}}$는 더미 변수를 의미한다.  
범주형 예측 변수("Pclass", "Sex")는 더미 변환이 수행되었는데, 예를 들어, $X_{\text{Pclass2}}$는 탑승객의 티켓 등급이 2등급인 경우 "1"값을 가지고 2등급이 아니면 "0"값을 가진다.

```{r}
OR <- exp(coef(logis.fit))                             # Odds Ratio
CI <- exp(confint(logis.fit))                          # 95% Confidence Interval

cbind("Odds Ratio" = round(OR, 3),                     # round : 반올림
      round(CI, 3))
```

`Result!` 오즈비를 살펴보면, 나이("Age")를 표준화한 값이 1 증가할 경우, 탑승객의 생존 가능성은 1.700(=1/0.589)배 감소한다. 반면, 티켓 요금("Fare")을 표준화한 값이 1 증가할 경우, 탑승객의 생존 가능성은 1.130배 증가한다.

## 모형 평가

`Caution!` 모형 평가를 위해 `Test Dataset`에 대한 `예측 class/확률` 이 필요하며, 함수 `predict()`를 이용하여 생성한다. 

```{r}
# 예측 확률 생성
test.logis.prob <- predict(logis.fit, 
                           newdata = titanic.ted.Imp,                      # Test Dataset including Only 예측 변수                        
                           type = "response")                              # 예측 확률 생성 

test.logis.prob %>%                                                        # "Survived = yes"에 대한 예측 확률
  as_tibble

# 예측 class 생성
logis.pred <- ifelse(test.logis.prob > 0.5, "yes", "no") %>%               # "Survived = yes"에 대한 예측 확률이 0.5 초과하면 "yes", 0.5를 넘기지 못하면 "no"로 분류
  factor                                                                   # 범주형으로 변환

logis.pred %>%                                      
  as_tibble
```

<br />

### ConfusionMatrix

```{r}
CM   <- caret::confusionMatrix(logis.pred, titanic.ted.Imp$Survived, 
                               positive = "yes")        # confusionMatrix(예측 class, 실제 class, positive = "관심 class")
CM
```

<br />

### ROC 곡선

```{r}
ac  <- titanic.ted.Imp$Survived                           # Test Dataset의 실제 class 
pp  <- as.numeric(test.logis.prob)                        # 예측 확률을 수치형으로 변환
```

#### Package "pROC"

```{r}
pacman::p_load("pROC")

logis.roc  <- roc(ac, pp, plot = T, col = "gray")         # roc(실제 class, 예측 확률)
auc        <- round(auc(logis.roc), 3)
legend("bottomright", legend = auc, bty = "n")
```

`Caution!` Package `"pROC"`를 통해 출력한 ROC 곡선은 다양한 함수를 이용해서 그래프를 수정할 수 있다.

```{r}
# 함수 plot.roc() 이용
plot.roc(logis.roc,   
         col="gray",                                      # Line Color
         print.auc = TRUE,                                # AUC 출력 여부
         print.auc.col = "red",                           # AUC 글씨 색깔
         print.thres = TRUE,                              # Cutoff Value 출력 여부
         print.thres.pch = 19,                            # Cutoff Value를 표시하는 도형 모양
         print.thres.col = "red",                         # Cutoff Value를 표시하는 도형의 색깔
         auc.polygon = TRUE,                              # 곡선 아래 면적에 대한 여부
         auc.polygon.col = "gray90")                      # 곡선 아래 면적의 색깔
```


```{r}
# 함수 ggroc() 이용
ggroc(logis.roc) +
annotate(geom = "text", x = 0.9, y = 1.0,
label = paste("AUC = ", auc),
size = 5,
color="red") +
theme_bw()
```


#### Package "Epi"

```{r}
pacman::p_load("Epi")       
# install_version("etm", version = "1.1", repos = "http://cran.us.r-project.org")

ROC(pp, ac, plot = "ROC")                                  # ROC(예측 확률, 실제 class)  
```


#### Package "ROCR"

```{r}
pacman::p_load("ROCR")

logis.pred <- prediction(pp, ac)                          # prediction(예측 확률, 실제 class)    

logis.perf <- performance(logis.pred, "tpr", "fpr")       # performance(, "민감도", "1-특이도")                      
plot(logis.perf, col = "gray")                            # ROC Curve

perf.auc   <- performance(logis.pred, "auc")              # AUC
auc        <- attributes(perf.auc)$y.values 
legend("bottomright", legend = auc, bty = "n")
```

<br />

### 향상 차트

#### Package "ROCR"

```{r}
logis.pred <- performance(logis.pred, "lift", "rpp")      # Lift Chart
plot(logis.pred, main = "lift curve", 
     colorize = T,                                        # Coloring according to cutoff
     lwd = 2)  
```


```{r, echo=F, eval = F, include=FALSE}
#### **2) Package "lift"**

pacman::p_load("lift")

ac.numeric <- ifelse(titanic.ted.Imp$Survived == "yes", 1, 0)         # Target을 수치형으로 변환

plotLift(test.logis.prob, ac.numeric, cumulative = T, n.buckets = 24) # plotLift(7-1에서 생성한 예측 확률, 실제 class)
TopDecileLift(test.logis.prob, ac.numeric)		                        # Top 10%의 향상도 출력
```


