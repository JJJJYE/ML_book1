---
title: "Random Forest"
format: 
  html:
    theme: cosmo
    smooth-scroll: true
    toc: true
    toc-location: right
    # self-contained: true
# author: 
#     - name: J.I. Seo
#       affiliations:
#       - Gyeongguk National University
#     - name: J.W. Lee
#       # affiliations:
#       # - University of Missouri
      
number-sections: true
highlight-style: pygments
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
options(width=200)
```

> 실습 자료 : 1912년 4월 15일 타이타닉호 침몰 당시 탑승객들의 정보를 기록한 데이터셋이며, 총 11개의 변수를 포함하고 있다. 이 자료에서 **Target**은 `Survived`이다.

<center>![](./image/그림_titanic.png)</center>

<br />

<center><img src="./image/Titanic_표.png" width="400" height="400"></center>

<br />

## 데이터 불러오기


```{r, eval=F}
pacman::p_load("data.table", 
               "tidyverse", 
               "dplyr", "tidyr",
               "ggplot2", "GGally",
               "caret",
               "randomForest")                                          # For randomForest

titanic <- fread("../Titanic.csv")                                      # 데이터 불러오기

titanic %>%
  as_tibble
```

```{r, echo=F}
pacman::p_load("data.table", 
               "tidyverse", 
               "dplyr", "tidyr",
               "ggplot2", "GGally",
               "caret",
               "randomForest")                                          # For randomForest

titanic <- fread(paste(getwd(), "/DATA/Titanic.csv", sep = "/"))              # 데이터 불러오기

titanic %>%
  as_tibble
```


##  데이터 전처리 I

```{r}
titanic %<>%
  data.frame() %>%                                                      # Data Frame 형태로 변환 
  mutate(Survived = ifelse(Survived == 1, "yes", "no"))                 # Target을 문자형 변수로 변환

# 1. Convert to Factor
fac.col <- c("Pclass", "Sex",
             # Target
             "Survived")

titanic <- titanic %>% 
  mutate_at(fac.col, as.factor)                                         # 범주형으로 변환

glimpse(titanic)                                                        # 데이터 구조 확인

# 2. Generate New Variable
titanic <- titanic %>%
  mutate(FamSize = SibSp + Parch)                                       # "FamSize = 형제 및 배우자 수 + 부모님 및 자녀 수"로 가족 수를 의미하는 새로운 변수

glimpse(titanic)                                                        # 데이터 구조 확인

# 3. Select Variables used for Analysis
titanic1 <- titanic %>% 
  select(Survived, Pclass, Sex, Age, Fare, FamSize)                     # 분석에 사용할 변수 선택

glimpse(titanic1)                                                       # 데이터 구조 확인
```

## 데이터 탐색

```{r}
ggpairs(titanic1,                                        
        aes(colour = Survived)) +                         # Target의 범주에 따라 색깔을 다르게 표현
  theme_bw()

ggpairs(titanic1,                                     
        aes(colour = Survived, alpha = 0.8)) +            # Target의 범주에 따라 색깔을 다르게 표현
  scale_colour_manual(values = c("#00798c", "#d1495b")) + # 특정 색깔 지정
  scale_fill_manual(values = c("#00798c", "#d1495b")) +   # 특정 색깔 지정
  theme_bw()
```



## 데이터 분할

```{r}
# Partition (Training Dataset : Test Dataset = 7:3)
y      <- titanic1$Survived                           # Target

set.seed(200)
ind    <- createDataPartition(y, p = 0.7, list  =T)   # Index를 이용하여 7:3으로 분할
titanic.trd <- titanic1[ind$Resample1,]               # Training Dataset
titanic.ted <- titanic1[-ind$Resample1,]              # Test Dataset
```


## 데이터 전처리 II

```{r}
# Imputation
titanic.trd.Imp <- titanic.trd %>% 
  mutate(Age = replace_na(Age, mean(Age, na.rm = TRUE)))                 # 평균으로 결측값 대체

titanic.ted.Imp <- titanic.ted %>% 
  mutate(Age = replace_na(Age, mean(titanic.trd$Age, na.rm = TRUE)))     # Training Dataset을 이용하여 결측값 대체

glimpse(titanic.trd.Imp)                                                 # 데이터 구조 확인
glimpse(titanic.ted.Imp)                                                 # 데이터 구조 확인
```
 

## 모형 훈련

Bagging은 "Bootstrap Aggregation"의 약어로써 Original Dataset으로부터 크기가 동일한 Bootstrap Dataset을 생성한 후 각 Dataset에 독립적으로 예측 모형을 적용하고, 예측 결과를 집계하여 최종 예측을 도출한다. Bagging은 여러 모형의 예측 결과를 집계함으로써 예측 성능을 향상시키는 앙상블 기법이다.

<center>
![](./image/Bagging.png){width=80%}
</center>

</br>


Random Forest는 Bagging 기법을 사용하는 대표적인 머신러닝 알고리듬으로 Original Dataset으로부터 크기가 동일한 Bootstrap Dataset을 생성한 후 각 Dataset에 독립적으로 의사결정나무(Decision Tree)를 적용한다. Random Forest의 가장 큰 특징은 노드를 분할할 때마다 $m$개의 예측 변수(Feature)를 랜덤하게 추출하고 그중 최적의 변수의 선택한다. 이러한 랜덤성은 생성된 트리들의 상관성을 낮춤으로써 성능을 더욱 향상시키는 역할을 한다.

<center>
![](./image/rf.png){width=70%}
</center>

</br>


R에서 Random Forest를 수행하기 위해 package `"randomForest"`에서 제공하는 함수 `randomForest()`를 이용할 수 있으며, 함수의 자세한 옵션은 [여기](https://www.rdocumentation.org/packages/randomForest/versions/4.6-14/topics/randomForest)를 참고한다.

```{r, eval=FALSE}
randomForest(formula, data, ntree, importance, mtry, ...)
```

- `formula` : Target과 예측 변수의 관계를 표현하기 위한 함수로써 일반적으로 `Target ~ 예측 변수`의 형태로 표현한다.
- `data` : `formula`에 포함하고 있는 변수들의 데이터셋(Data Frame)
-  `ntree` : 생성하고자 하는 트리 개수
- `importance` : 예측 변수에 대한 중요도 평가 여부
- `mtry` : 노드를 분할할 때마다 랜덤하게 추출할 예측 변수 개수


```{r}
set.seed(100)                                         # Seed 고정 -> 동일한 결과를 출력하기 위해
titanic.rf <- randomForest(Survived ~ ., 
                           data = titanic.trd.Imp,
                           ntree = 100, 
                           importance = TRUE,
                           mtry = 5) 

titanic.rf

# 변수 중요도
titanic.rf$importance
varImpPlot(titanic.rf)
```

`Result!` 정확도 측면에서는 `Sex`가 제일 중요하며, 지니계수 측면에서는 `Fare`이 Target `Survived`을 분류하는 데 있어 중요하다.

```{r}
# OBB Error
oob.error.data <- data.frame(Trees = rep(1:nrow(titanic.rf$err.rate), times = 3), 
                             Type = rep(c("OOB","No","Yes"), 
                                        each = nrow(titanic.rf$err.rate)),
                             Error = c(titanic.rf$err.rate[,"OOB"],
                                       titanic.rf$err.rate[,"no"],
                                       titanic.rf$err.rate[,"yes"]))

ggplot(data = oob.error.data, aes(x = Trees, y = Error)) + 
  geom_line(aes(color = Type)) + 
  theme_bw()
```

`Caution!` Original Dataset으로부터 Bootstrap Dataset을 생성할 때 추출되지 않은 Data Point를 Out of Bag (OBB) Sample이라고 부른다. OBB Sample을 이용하여 Random Forest가 얼마나 잘 구축되었는지 검증할 수 있는데, 이때 계산된 오차를 OBB 오차라고 한다. 


## 모형 평가

`Caution!` 모형 평가를 위해 `Test Dataset`에 대한 `예측 class/확률` 이 필요하며, 함수 `predict()`를 이용하여 생성한다. 
```{r}
# 예측 class 생성 
test.rf.class <- predict(titanic.rf,
                         newdata = titanic.ted.Imp[,-1], # Test Dataset including Only 예측 변수   
                         type = "class")                 # 예측 class 생성       

test.rf.class %>%
  as_tibble
```

<br />

### ConfusionMatrix

```{r}
CM   <- caret::confusionMatrix(test.rf.class, titanic.ted.Imp$Survived, 
                               positive = "yes")       # confusionMatrix(예측 class, 실제 class, positive = "관심 class")
CM
```

<br />

### ROC 곡선

```{r}
# 예측 확률 생성
test.rf.prob <- predict(titanic.rf, 
                        newdata = titanic.ted.Imp[,-1], # Test Dataset including Only 예측 변수  
                        type = "prob")                  # 예측 확률 생성     

test.rf.prob %>%
  as_tibble
```

```{r}
test.rf.prob <- test.rf.prob[,2]                       # "Survived = yes"에 대한 예측 확률

ac  <- titanic.ted.Imp$Survived                        # Test Dataset의 실제 class 
pp  <- as.numeric(test.rf.prob)                        # 예측 확률을 수치형으로 변환
```

#### Package "pROC"

```{r}
pacman::p_load("pROC")

rf.roc  <- roc(ac, pp, plot = T, col = "gray")         # roc(실제 class, 예측 확률)
auc     <- round(auc(rf.roc), 3)
legend("bottomright", legend = auc, bty = "n")
```

`Caution!` Package `"pROC"`를 통해 출력한 ROC 곡선은 다양한 함수를 이용해서 그래프를 수정할 수 있다.

```{r}
# 함수 plot.roc() 이용
plot.roc(rf.roc,   
         col="gray",                                   # Line Color
         print.auc = TRUE,                             # AUC 출력 여부
         print.auc.col = "red",                        # AUC 글씨 색깔
         print.thres = TRUE,                           # Cutoff Value 출력 여부
         print.thres.pch = 19,                         # Cutoff Value를 표시하는 도형 모양
         print.thres.col = "red",                      # Cutoff Value를 표시하는 도형의 색깔
         auc.polygon = TRUE,                           # 곡선 아래 면적에 대한 여부
         auc.polygon.col = "gray90")                   # 곡선 아래 면적의 색깔
```


```{r}
# 함수 ggroc() 이용
ggroc(rf.roc) +
annotate(geom = "text", x = 0.9, y = 1.0,
label = paste("AUC = ", auc),
size = 5,
color="red") +
theme_bw()
```



#### Package "Epi"

```{r}
pacman::p_load("Epi")       
# install_version("etm", version = "1.1", repos = "http://cran.us.r-project.org")

ROC(pp, ac, plot = "ROC")                              # ROC(예측 확률, 실제 class)  
```

#### Package "ROCR"

```{r}
pacman::p_load("ROCR")

rf.pred <- prediction(pp, ac)                          # prediction(예측 확률, 실제 class) 

rf.perf <- performance(rf.pred, "tpr", "fpr")          # performance(, "민감도", "1-특이도")                      
plot(rf.perf, col = "gray")                            # ROC Curve

perf.auc   <- performance(rf.pred, "auc")              # AUC
auc        <- attributes(perf.auc)$y.values
legend("bottomright", legend = auc, bty = "n")
```

<br />

### 향상 차트

#### Package "ROCR"

```{r}
rf.perf <- performance(rf.pred, "lift", "rpp")         # Lift Chart                      
plot(rf.perf, main = "lift curve",
     colorize = T,                                     # Coloring according to cutoff 
     lwd = 2) 
```


```{r, eval=F, echo=F, include=FALSE}
#### **2) Package "lift"**

pacman::p_load("lift")

ac.numeric <- ifelse(titanic.ted.Imp$Survived == "yes", 1, 0)         # Target을 수치형으로 변환

plotLift(test.svm.prob, ac.numeric, cumulative = T, n.buckets = 24)   # plotLift(7-2에서 생성한 예측 확률, 실제 class)
TopDecileLift(test.svm.prob, ac.numeric)		                          # Top 10%의 향상도 출력
```

