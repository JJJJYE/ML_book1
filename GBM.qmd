---
title: "Gradient Boosting"
format: 
  html:
    theme: zephyr
    smooth-scroll: true
    toc: true
    toc-location: right
    # self-contained: true
# author: 
#     - name: J.I. Seo
#       affiliations:
#       - Gyeongguk National University
#     - name: J.W. Lee
#       # affiliations:
#       # - University of Missouri
      
number-sections: true
highlight-style: pygments
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
options(width=200)
```

> Gradient Boosting의 장점
 
- 예측 성능이 높다.
- 다양한 손실함수를 최적화할 수 있다.

</br>

> Gradient Boosting의 단점

- 이상치에 민감하다.
- 과적합이 빠르게 발생할 수 있다.
- 병렬 처리가 지원되지 않아 대용량 데이터셋의 경우 매우 많은 시간이 필요하다.
- 수행시간이 오래 걸린다.

</br>
 
> 실습 자료 : 1912년 4월 15일 타이타닉호 침몰 당시 탑승객들의 정보를 기록한 데이터셋이며, 총 11개의 변수를 포함하고 있다. 이 자료에서 **Target**은 `Survived`이다.

<center>![](./image/그림_titanic.png)</center>

<br />

<center><img src="./image/Titanic_표.png" width="400" height="400"></center>

<br />

## 데이터 불러오기


```{r, eval=F}
pacman::p_load("data.table", 
               "tidyverse", 
               "dplyr", "tidyr",
               "ggplot2", "GGally",
               "caret",
               "gbm")                                                   # For gbm

titanic <- fread("../Titanic.csv")                                      # 데이터 불러오기

titanic %>%
  as_tibble
```

```{r, echo=F}
pacman::p_load("data.table", 
               "tidyverse", 
               "dplyr",  "tidyr",
               "ggplot2", "GGally",
               "caret",
               "gbm")                                                   # For gbm

titanic <- fread(paste(getwd(), "/DATA/Titanic.csv", sep = "/"))              # 데이터 불러오기

titanic %>%
  as_tibble
```


## 데이터 전처리 I

```{r}
# 1. Convert to Factor
fac.col <- c("Pclass", "Sex")

titanic <- titanic %>% 
  data.frame() %>%                                                      # Data Frame 형태로 변환 
  mutate_at(fac.col, as.factor)                                         # 범주형으로 변환

glimpse(titanic)                                                        # 데이터 구조 확인

# 2. Generate New Variable
titanic <- titanic %>%
  mutate(FamSize = SibSp + Parch)                                       # "FamSize = 형제 및 배우자 수 + 부모님 및 자녀 수"로 가족 수를 의미하는 새로운 변수

glimpse(titanic)                                                        # 데이터 구조 확인

# 3. Select Variables used for Analysis
titanic1 <- titanic %>% 
  dplyr::select(Survived, Pclass, Sex, Age, Fare, FamSize)              # 분석에 사용할 변수 선택

glimpse(titanic1)                                                       # 데이터 구조 확인
```

## 데이터 탐색

```{r}
ggpairs(titanic1,                                        
        aes(colour = as.factor(Survived))) +                         # Target의 범주에 따라 색깔을 다르게 표현
  theme_bw()

ggpairs(titanic1,                                     
        aes(colour = as.factor(Survived), alpha = 0.8)) +            # Target의 범주에 따라 색깔을 다르게 표현
  scale_colour_manual(values = c("#00798c", "#d1495b")) +            # 특정 색깔 지정
  scale_fill_manual(values = c("#00798c", "#d1495b")) +              # 특정 색깔 지정
  theme_bw()
```

## 데이터 분할

```{r}
# Partition (Training Dataset : Test Dataset = 7:3)
y      <- titanic1$Survived                           # Target

set.seed(200)
ind    <- createDataPartition(y, p = 0.7, list  =T)   # Index를 이용하여 7:3으로 분할
titanic.trd <- titanic1[ind$Resample1,]               # Training Dataset
titanic.ted <- titanic1[-ind$Resample1,]              # Test Dataset
```


## 데이터 전처리 II

```{r}
# Imputation
titanic.trd.Imp <- titanic.trd %>% 
  mutate(Age = replace_na(Age, mean(Age, na.rm = TRUE)))                 # 평균으로 결측값 대체

titanic.ted.Imp <- titanic.ted %>% 
  mutate(Age = replace_na(Age, mean(titanic.trd$Age, na.rm = TRUE)))     # Training Dataset을 이용하여 결측값 대체

glimpse(titanic.trd.Imp)                                                 # 데이터 구조 확인
glimpse(titanic.ted.Imp)                                                 # 데이터 구조 확인
```

## 모형 훈련

Boosting은 다수의 약한 학습자(간단하면서 성능이 낮은 예측 모형)을 순차적으로 학습하는 앙상블 기법이다. Boosting의 특징은 이전 모형의 오차를 반영하여 다음 모형을 생성하며, 오차를 개선하는 방향으로 학습을 수행한다.

<center>![](./image/boosting.png)</center>

</br>


Gradient Boosting은 손실함수를 이용하여 손실함수가 작아지는 방향으로 예측값을 업데이트하며 이전 모형의 오차를 기반으로 다음 모형을 생성한다.

<center>
![](./image/gbm.png){width=70%}
</center>

</br>

<center>
![](./image/gbm2.png)
</center>

</br>

R에서 Gradient Boosting을 수행하기 위해 package `"gbm"`에서 제공하는 함수 `gbm()`를 이용할 수 있으며, 함수의 자세한 옵션은 [여기](https://www.rdocumentation.org/packages/gbm/versions/2.1.8/topics/gbm)를 참고한다. 

```{r, eval=FALSE}
gbm(formula, data, distribution, n.trees, interaction.depth, shrinkage, cv.folds, ...)       
```

- `formula` : Target과 예측 변수의 관계를 표현하기 위한 함수로써 일반적으로 `Target ~ 예측 변수`의 형태로 표현한다.
- `data` : `formula`에 포함하고 있는 변수들의 데이터셋(Data Frame)
-  `distribution` : 손실함수
    - Classification : `"bernoulli"` (이진 분류)
    - Regression : `"gaussian"` (Squared Error)
- `n.trees` : 생성하고자 하는 트리 개수
- `interaction.depth` : 트리의 최대 깊이
- `shrinkage` : 학습률
- `cv.folds` : $k$-Fold Cross Validation의 $k$(= Fold 수) 
    - 값을 입력하면 Cross Validation를 통해 `n.trees`의 최적값을 찾을 수 있다.

```{r}
set.seed(100)                                         # Seed 고정 -> 동일한 결과를 출력하기 위해
titanic.gbm <- gbm(Survived~.,
                   data = titanic.trd.Imp,
                   distribution = "bernoulli",               
                   n.trees = 50,                    
                   interaction.depth = 30, 
                   shrinkage = 0.1)
```

`Caution!` 함수 `gbm()`을 사용하려면 이진 분류문제에서 Target은 `"0" 또는 "1" 값을 가지는 수치형`이어야 한다.

```{r}
# 변수 중요도
summary.gbm(titanic.gbm, las = 2)  
```

`Result!` 변수 `Sex`가 Target `Survived`을 분류하는 데 있어 중요하다.

## 모형 평가

`Caution!` 모형 평가를 위해 `Test Dataset`에 대한 `예측 class/확률` 이 필요하며, 함수 `predict()`를 이용하여 생성한다. 
```{r}
# 예측 확률 생성 
test.gbm.prob <- predict(titanic.gbm,
                         newdata = titanic.ted.Imp[,-1],# Test Dataset including Only 예측 변수 
                         type = "response")             # "Survived = 1"에 대한 예측 확률 생성

test.gbm.prob %>%
  as_tibble
```

<br />

### ConfusionMatrix

```{r}
# 예측 class 생성
cv <- 0.5                                                          # Cutoff Value
test.gbm.class <- as.factor(ifelse(test.gbm.prob > cv, "1", "0"))  # 예측 확률 > cv이면 "Survived = 1" 아니면 "Survived = 0"

test.gbm.class %>%
  as_tibble
```


```{r}
CM   <- caret::confusionMatrix(test.gbm.class, as.factor(titanic.ted.Imp$Survived), 
                               positive = "1")         # confusionMatrix(예측 class, 실제 class, positive = "관심 class")
CM
```

<br />

### ROC 곡선

```{r}
ac  <- titanic.ted.Imp$Survived                        # Test Dataset의 실제 class 
pp  <- as.numeric(test.gbm.prob)                       # 예측 확률을 수치형으로 변환
```

#### Package "pROC"

```{r}
pacman::p_load("pROC")

gbm.roc  <- roc(ac, pp, plot = T, col = "gray")        # roc(실제 class, 예측 확률)
auc      <- round(auc(gbm.roc), 3)
legend("bottomright", legend = auc, bty = "n")
```

`Caution!` Package `"pROC"`를 통해 출력한 ROC 곡선은 다양한 함수를 이용해서 그래프를 수정할 수 있다.

```{r}
# 함수 plot.roc() 이용
plot.roc(gbm.roc,   
         col="gray",                                   # Line Color
         print.auc = TRUE,                             # AUC 출력 여부
         print.auc.col = "red",                        # AUC 글씨 색깔
         print.thres = TRUE,                           # Cutoff Value 출력 여부
         print.thres.pch = 19,                         # Cutoff Value를 표시하는 도형 모양
         print.thres.col = "red",                      # Cutoff Value를 표시하는 도형의 색깔
         auc.polygon = TRUE,                           # 곡선 아래 면적에 대한 여부
         auc.polygon.col = "gray90")                   # 곡선 아래 면적의 색깔
```


```{r}
# 함수 ggroc() 이용
ggroc(gbm.roc) +
annotate(geom = "text", x = 0.9, y = 1.0,
label = paste("AUC = ", auc),
size = 5,
color="red") +
theme_bw()
```



#### Package "Epi"

```{r}
pacman::p_load("Epi")       
# install_version("etm", version = "1.1", repos = "http://cran.us.r-project.org")

ROC(pp, ac, plot = "ROC")                              # ROC(예측 확률, 실제 class)  
```

#### Package "ROCR"

```{r}
pacman::p_load("ROCR")

gbm.pred <- prediction(pp, ac)                         # prediction(예측 확률, 실제 class) 

gbm.perf <- performance(gbm.pred, "tpr", "fpr")        # performance(, "민감도", "1-특이도")                      
plot(gbm.perf, col = "gray")                           # ROC Curve

perf.auc   <- performance(gbm.pred, "auc")             # AUC
auc        <- attributes(perf.auc)$y.values
legend("bottomright", legend = auc, bty = "n")
```

<br />

### 향상 차트

#### Package "ROCR"

```{r}
gbm.perf <- performance(gbm.pred, "lift", "rpp")       # Lift Chart                      
plot(gbm.perf, main = "lift curve",
     colorize = T,                                     # Coloring according to cutoff 
     lwd = 2) 
```


```{r, eval=F, echo=F, include=FALSE}
#### **2) Package "lift"**

pacman::p_load("lift")

plotLift(test.gbm.prob, titanic.ted.Imp$Survived, cumulative = T, n.buckets = 24)  # plotLift(7-2에서 생성한 예측 확률, 실제 class)
TopDecileLift(test.gbm.prob, titanic.ted.Imp$Survived)		                         # Top 10%의 향상도 출력
```